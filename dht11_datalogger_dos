//
//Celsius to Fahrenheit conversion
double Fahrenheit(double celsius)
{
        return 1.8 * celsius + 32;
}

//Celsius to Kelvin conversion
double Kelvin(double celsius)
{
        return celsius + 273.15;
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm 
double dewPoint(double celsius, double humidity)
{
        double A0= 373.15/(273.15 + celsius);
        double SUM = -7.90298 * (A0-1);
        SUM += 5.02808 * log10(A0);
        SUM += -1.3816e-7 * (pow(10, (11.344*(1-1/A0)))-1) ;
        SUM += 8.1328e-3 * (pow(10,(-3.49149*(A0-1)))-1) ;
        SUM += log10(1013.246);
        double VP = pow(10, SUM-3) * humidity;
        double T = log(VP/0.61078);   // temp var
        return (241.88 * T) / (17.558-T);
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double dewPointFast(double celsius, double humidity)
{
        double a = 17.271;
        double b = 237.7;
        double temp = (a * celsius) / (b + celsius) + log(humidity/100);
        double Td = (b * temp) / (a - temp);
        return Td;
}

   
#include <dht11.h>
#include <SD.h>

#define DHT11PIN 2
#define DHT11PINDOS 3

dht11 DHT11;
dht11 DHT11DOS;

const int chipSelect = 4;

void setup()
{
 // Open serial communications and wait for port to open:
  Serial.begin(9600);
   while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
 
  Serial.println("DHT11 TEST PROGRAM ");
  Serial.print("LIBRARY VERSION: ");
  Serial.println(DHT11LIB_VERSION);
  Serial.println();
}

  Serial.print("Initializing SD card...");
  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  pinMode(10, OUTPUT);
  
  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
    // don't do anything more:
    return;
  }
  Serial.println("card initialized.");
  
File dataFile = SD.open("readings.txt", FILE_WRITE);
dataFile.println("Begin New Reading");
dataFile.close();
}



void loop()
{
  
  File dataFile = SD.open("readings.txt", FILE_WRITE);

  Serial.println("\n");

  int chk = DHT11.read(DHT11PIN);
  int chkdos = DHT11DOS.read(DHT11PINDOS);

  Serial.print("Read sensor: ");
  switch (chk)
  {
    case 0: Serial.println("OK"); break;
    case -1: Serial.println("Checksum error"); break;
    case -2: Serial.println("Time out error"); break;
    default: Serial.println("Unknown error"); break;
  }
  
   switch (chkdos)
  {
    case 0: Serial.println("OK"); break;
    case -1: Serial.println("Checksum error"); break;
    case -2: Serial.println("Time out error"); break;
    default: Serial.println("Unknown error"); break;
  }

  Serial.print("Humidity (%): ");
  Serial.println((float)DHT11.humidity, 2);
  Serial.print("HumidityDOS (%): ");
  Serial.println((float)DHT11DOS.humidity, 3);
  
  Serial.print("Temperature (oC): ");
  Serial.println((float)DHT11.temperature, 2);
  Serial.print("TemperatureDOS (oC): ");
  Serial.println((float)DHT11DOS.temperature, 3);

  Serial.print("Temperature (oF): ");
  Serial.println(Fahrenheit(DHT11.temperature), 2);
  Serial.print("TemperatureDOS (oF): ");
  Serial.println(Fahrenheit(DHT11DOS.temperature), 3);

  Serial.print("Temperature (K): ");
  Serial.println(Kelvin(DHT11.temperature), 2);
  Serial.print("TemperatureDOS (K): ");
  Serial.println(Kelvin(DHT11DOS.temperature), 3);

  Serial.print("Dew Point (oC): ");
  Serial.println(dewPoint(DHT11.temperature, DHT11.humidity));
  Serial.print("Dew PointDOS (oC): ");
  Serial.println(dewPoint(DHT11DOS.temperature, DHT11DOS.humidity));

  Serial.print("Dew PointFast (oC): ");
  Serial.println(dewPointFast(DHT11.temperature, DHT11.humidity));
  Serial.print("Dew PointFastDOS (oC): ");
  Serial.println(dewPointFast(DHT11DOS.temperature, DHT11DOS.humidity));
  
  dataFile.print("Temperature Sensor 1: ");
  dataFile.println(DHT11.temperature);
  dataFile.print("Temperature Sensor 2: ");
  dataFile.println(DHT11DOS.temperature);
  dataFile.println();
  dataFile.close();

  delay(2000);
}
